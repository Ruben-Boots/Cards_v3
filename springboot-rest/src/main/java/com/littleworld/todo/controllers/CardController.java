
/* generated by: ControllerGenerator Wed May 18 15:20:45 CEST 2016 */
package com.littleworld.todo.controllers;

import com.littleworld.todo.model.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;


import com.littleworld.todo.services.CardService;
import com.littleworld.todo.services.WhiteCardService;
import com.littleworld.todo.services.BlackCardService;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

//@CrossOrigin(origins = "http://localhost:4200")
@CrossOrigin(origins = "http://10.2.12.129:4200")
@Controller
public class CardController {
    int maxRondes = 0;
    int count = 0 ;
    int id = 0 ;
    int bevestig = 0;
    int ronde = 0;
    boolean spel = false;
    boolean czarview = false;
    String[] sets = {"Maindeck","EXP1",""};
    String[] playedCards;

    ArrayList<User> users = new ArrayList<>();

    @Autowired  private CardService cardService;

    @Autowired  private WhiteCardService cardWhite;

    @Autowired  private BlackCardService cardBlack;

    static ReadCards reader = new ReadCards();
    static ArrayList<BlackCard> blackCards = new ArrayList<>();

    @ResponseBody
    @RequestMapping(value = "/playedCards", method = RequestMethod.GET)
    public String[] getPlayed() {
        return playedCards;
    }

    @ResponseBody
    @RequestMapping(value = "/availablesets", method = RequestMethod.GET)
    public String[] getAvailableSets(){
        return this.reader.getCardsets();
    }


    @ResponseBody
    @RequestMapping(value = "/playedCards/clear", method = RequestMethod.GET)
    public void clearPlayed() {

    }

    @ResponseBody
    @RequestMapping(value = "/playedCards/{id}", method = RequestMethod.POST)
    public void setPlayed(@RequestBody String[] cards, @PathVariable int id) {
        System.out.println("user:" + id);
        for (int i = 0; i < cards.length; i++) {
            playedCards[(id-1)*3+i] = cards[i];
        }
    }

    @ResponseBody
    @RequestMapping(value = "/playedCards/create", method = RequestMethod.GET)
    public void createPlayed() {
        System.out.println("users: " + users.size());
        playedCards = new String[3*users.size()];
        System.out.println("lengte playedcards" + playedCards.length);
    }

    @ResponseBody
    @RequestMapping(value = "/czarview", method = RequestMethod.GET)
    public void setCzarview() {
        czarview = !czarview;
    }

    @ResponseBody
    @RequestMapping(value = "/sets", method = RequestMethod.POST)
    public void create(@RequestBody String[] sets) {
        this.sets = sets;
    }


    @ResponseBody
    @RequestMapping(value = "/blackcard/reset", method = RequestMethod.GET)
    public void resetBlackCard() {
        blackCards = new ArrayList<>();
    }

    @ResponseBody
    @RequestMapping(value = "/bevestig/reset", method = RequestMethod.GET)
    public void resetBevestig() {
        bevestig = 0;
    }

    @ResponseBody
    @RequestMapping(value = "/bevestig", method = RequestMethod.GET)
    public void setBevestig() {
        bevestig++;
    }


    @ResponseBody
    @RequestMapping(value = "/ronde", method = RequestMethod.GET)
    public void volgendeRonde() {
        ronde++;
    }

    @ResponseBody
    @RequestMapping(value = "/ronde/reset", method = RequestMethod.GET)
    public void rondeReset() {
        ronde = 0;
    }


    @ResponseBody
    @RequestMapping(value = "/reset", method = RequestMethod.GET)
    public void resetSpring() {
        bevestig = 0;
        users = new ArrayList<>();
        spel = false;
        ronde = 0;
        id = 0;
    }

    @ResponseBody
    @RequestMapping(value = "/stuff", method = RequestMethod.GET)
    public int[] getStuff() {
        int[] stuff = new int[5];
        stuff[0] = bevestig;
        stuff[1] = users.size();
        stuff[2] = ronde;
        stuff[3] = maxRondes;
        stuff[4] = czarview?1:0;
        return stuff;
    }


    @ResponseBody
    @RequestMapping(value = "/user/naam/{id}", method = RequestMethod.GET)
    public String getUserNaam(@PathVariable int id) {
        System.out.println("id: " + id);
        for (User user: users) {
            if (user.getId()==id) {
                System.out.println(id+ " naam:" + user.getNaam());
                return "\""+user.getNaam()+"\"";
            }
        }
        return "\"Sjaakdedraak\"";
    }

    @ResponseBody
    @RequestMapping(value = "/add/{naam}", method = RequestMethod.GET)
    public int addUser(@PathVariable String naam) {
        id++;
        users.add(new User((users.size() == 0), id, naam));
        return id;
    }

    @ResponseBody
    @RequestMapping(value = "/remove/{id}", method = RequestMethod.GET)
    public void removeUser(@PathVariable int id) {
        Iterator<User> i = users.iterator();
        while (i.hasNext()) {
            User u = i.next(); // must be called before you can call i.remove()
            if (u.getId() == id) {
                i.remove();
            }
        }
    }

    @ResponseBody
    @RequestMapping(value = "/user/{id}", method = RequestMethod.GET)
    public boolean getUser(@PathVariable int id) {
        for (User user : users) {
            if (user.getId()==id) {
                return user.isFirst();
            }
        }
        return users.get(0).isFirst();
    }

    @ResponseBody
    @RequestMapping(value = "/user/{id}/{ronde}", method = RequestMethod.GET)
    public void updateUser(@PathVariable int id, @PathVariable int ronde) {
        for (User user : users) {
            if (user.getId()==id) {
                user.setRonde(ronde);
            }
        }
    }

    @ResponseBody
    @RequestMapping(value = "/rondes/{max}", method = RequestMethod.GET)
    public void setMaxRondes(@PathVariable int max) {
        maxRondes = max;
    }

    @ResponseBody
    @RequestMapping(value = "/rondes", method = RequestMethod.GET)
    public int getMaxRondes() {
        return maxRondes;
    }




    //curl -H "Content-Type: application/json" -X POST -d '{"id": 0, "task": "taskTest"}' http://localhost:8080/todo
    @ResponseBody
    @RequestMapping(value = "/card", method = RequestMethod.POST)
    public int create(@RequestBody Card card) {
        return cardService.save(card).getId();
    }

    //curl -H "Content-Type: application/json" -X PUT -d '{"id": 1, "task": "taskTest"}' http://localhost:8080/todo/1
    @ResponseBody
    @RequestMapping(value = "/card/{id}", method = RequestMethod.PUT)
    public int updateCard(@PathVariable  int id, @RequestBody Card card) { return cardService.save(card).getId();
    }

    //curl -X DELETE http://localhost:8080/todo/1
    @ResponseStatus(value = HttpStatus.OK)
    @RequestMapping(value = "/card/{id}", method = RequestMethod.DELETE)
    public void updateCard(@PathVariable  int id) {
        cardService.delete(id);
    }

    //curl  http://localhost:8080/todo
    @ResponseBody
    @RequestMapping(value = "/card/draw/{aantal}", method = RequestMethod.GET)
    public synchronized WhiteCard[] findAll(@PathVariable int aantal) {
        if(!cardWhite.exists((long) 1))
            reader.read(cardBlack,cardWhite);
        if (reader.trackwhite.isEmpty() || ronde == 1 ) {
            reader.resetTrack(cardBlack, cardWhite, sets);
        }

        return reader.drawWhite(aantal,cardWhite);


//        if(reader.trackwhite.isEmpty())
//            reader.resetTrack(cardBlack,cardWhite,sets);
//
//
//
//        return reader.drawWhite(aantal,cardWhite);
    }

    @ResponseBody
    @RequestMapping(value = "/blackcard", method = RequestMethod.GET)
    public synchronized BlackCard BlackCard() {
        if(!cardBlack.exists((long) 1))
            reader.read(cardBlack,cardWhite);
        if (ronde == 1 || reader.trackblack.isEmpty()) {
            reader.resetTrack(cardBlack,cardWhite,sets);
        }


        if (blackCards.isEmpty()) {
            for (int i=0; i <= maxRondes; i++) {
                blackCards.add(reader.drawBlack(cardBlack));
            }
        }
        return blackCards.get(ronde-1);
//        count++;
//        if (blackCard==null||count==users.size()) {
//            if(!cardWhite.exists((long)1))
//                reader.read(cardBlack,cardWhite);
//            if(reader.trackwhite.isEmpty())
//                reader.resetTrack(cardBlack,cardWhite,sets);
//            blackCard = reader.drawBlack(cardBlack);
//            count = 0;
//            return blackCard;
//        } else {
//            return blackCard;
//        }

//        if(cardWhite.count()==0)
//            reader.read(cardBlack,cardWhite);
//        if(reader.trackwhite.isEmpty())
//            reader.resetTrack(cardBlack,cardWhite,sets);
//        return reader.drawBlack(cardBlack);
    }

    //curl  http://localhost:8080/todo/1
    @ResponseBody
    @RequestMapping(value = "/card/{id}", method = RequestMethod.GET)
    public Card cardById(@PathVariable  int id) {
        return cardService.findOne(id);
    }

    @RequestMapping(value = "/page", method = RequestMethod.GET)
    public String page() {
        return "card";
    }
}

